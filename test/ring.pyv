# module total_order(t: sort, r: relation (t, t)) {
#   axiom r(X,X)                        # Reflexivity
#   axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
#   axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
#   axiom r(X, Y) | r(Y, X)             # Totality
# }
#
# module ring_topology(t: sort) {
#     immutable relation btw(t,t,t)
#
#     axiom btw(W,X,Y) & btw(W,Y,Z) -> btw(W,X,Z)  # transitive
#     axiom btw(W,X,Y) -> !btw(W,Y,X)  # acyclic
#     axiom btw(W,X,Y) | btw(W,Y,X) | W=X | W=Y | X=Y  # total
#     axiom btw(X,Y,Z) -> btw(Y,Z,X)  # cyclic permutations
#
#     definition succ(x: t, y: t)
#         x != y & ((Z != x & Z != y) -> btw(x,y,Z))
# }

sort node

immutable relation le(node, node)

# instantiate total_order(node, le)
axiom le(X,X)
axiom le(X, Y) & le(Y, Z) -> le(X, Z)
axiom le(X, Y) & le(Y, X) -> X = Y
axiom le(X, Y) | le(Y, X)

# instantiate ring_topology(node)
immutable relation btw(node, node, node)

axiom btw(W,X,Y) & btw(W,Y,Z) -> btw(W,X,Z)
axiom btw(W,X,Y) -> !btw(W,Y,X)
axiom btw(W,X,Y) | btw(W,Y,X) | W=X | W=Y | X=Y
axiom btw(X,Y,Z) -> btw(Y,Z,X)

# definition succ(x: node, y: node)
#     x != y & ((Z != x & Z != y) -> btw(x,y,Z))

mutable relation leader(node)
mutable relation pending(node, node)

init !leader(N)
init !pending(N1, N2)

transition send(n: node, next: node)
  modifies pending
  # succ(n, next) &
  (forall Z. n != next & ((Z != n & Z != next) -> btw(n,next,Z))) &
  (forall N1, N2. pending(N1, N2) <-> old(pending(N1, N2)) | N1 = n & N2 = next)

transition recv(sender: node, n: node, next: node)
  modifies leader, pending
  # succ(n, next) &
  (forall Z. n != next & ((Z != n & Z != next) -> btw(n,next,Z))) &
  old(pending(sender, n)) &
  (sender = n ->
    (forall N. leader(N) <-> old(leader(N)) | N = n) &
    (forall N1, N2.
      !(N1 = sender & N2 = n) ->  # message may or may not be removed
      (pending(N1, N2) <-> old(pending(N1, N2))))) &
  (sender != n ->
    (forall N. leader(N) <-> old(leader(N))) &
    (le(n, sender) ->
      (forall N1, N2.
        !(N1 = sender & N2 = n) ->  # message may or may not be removed
        (pending(N1, N2) <-> old(pending(N1, N2)) | N1 = sender & N2 = next))) &
    (!le(n, sender) ->
      (forall N1, N2.
        !(N1 = sender & N2 = n) ->  # message may or may not be removed
        (pending(N1, N2) <-> old(pending(N1, N2))))))

twostate theorem [recv_alt]

  forall sender: node, n: node, next: node.

    (forall Z. n != next & ((Z != n & Z != next) -> btw(n,next,Z))) &
    old(pending(sender, n)) &
    (sender = n ->
      (forall N. leader(N) <-> old(leader(N)) | N = n) &
      (forall N1, N2.
        !(N1 = sender & N2 = n) ->  # message may or may not be removed
        (pending(N1, N2) <-> old(pending(N1, N2))))) &
    (sender != n ->
      (forall N. leader(N) <-> old(leader(N))) &
      (le(n, sender) ->
        (forall N1, N2.
          !(N1 = sender & N2 = n) ->  # message may or may not be removed
          (pending(N1, N2) <-> old(pending(N1, N2)) | N1 = sender & N2 = next))) &
      (!le(n, sender) ->
        (forall N1, N2.
          !(N1 = sender & N2 = n) ->  # message may or may not be removed
          (pending(N1, N2) <-> old(pending(N1, N2))))))

  <->

    (forall Z. n != next & ((Z != n & Z != next) -> btw(n,next,Z))) &
    old(pending(sender, n)) &
    (forall N. leader(N) <-> old(leader(N)) | N = n & sender = n) &
    (forall N1, N2.
        !(N1 = sender & N2 = n) ->  # message may or may not be removed
        (pending(N1, N2) <-> old(pending(N1, N2)) | N1 = sender & N2 = next & sender != n & le(n, sender)))

safety [one_leader] leader(X) & leader(Y) -> X = Y

invariant pending(S, D) & btw(S, N, D) -> le(N, S)
invariant [leader_max] leader(L) -> le(N, L)
invariant pending(L, L) -> le(N, L)

