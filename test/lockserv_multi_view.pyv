sort node
sort lock

mutable relation lock_msg(node, lock)
mutable relation grant_msg(node, lock)
mutable relation unlock_msg(node, lock)
mutable relation holds_lock(node, lock)
mutable relation server_holds_lock(lock)

immutable constant ql: lock

init !lock_msg(N, L)
init !grant_msg(N, L)
init !unlock_msg(N, L)
init !holds_lock(N, L)
init server_holds_lock(L)

transition send_lock(n: node, l: lock)
  modifies lock_msg
  lock_msg(N, L) <-> old(lock_msg(N, L)) | N = n & L = l

transition recv_lock(n: node, l: lock)
  modifies lock_msg, server_holds_lock, grant_msg
  old(lock_msg(n, l)) &
  old(server_holds_lock(l)) &
  (server_holds_lock(L) <-> old(server_holds_lock(L)) & L != l) &
  (lock_msg(N, L) <-> old(lock_msg(N, L)) & !(N = n & L = l)) &
  (grant_msg(N, L) <-> old(grant_msg(N, L)) | N = n & L = l)

transition recv_grant(n: node, l: lock)
  modifies grant_msg, holds_lock
  old(grant_msg(n, l)) &
  (grant_msg(N, L) <-> old(grant_msg(N, L)) & !(N = n & L = l)) &
  (holds_lock(N, L) <-> old(holds_lock(N, L)) | N = n & L = l)

transition unlock(n: node, l: lock)
  modifies holds_lock, unlock_msg
  old(holds_lock(n, l)) &
  (holds_lock(N, L) <-> old(holds_lock(N, L)) & !(N = n & L = l)) &
  (unlock_msg(N, L) <-> old(unlock_msg(N, L)) | N = n & L = l)

transition recv_unlock(n: node, l: lock)
  modifies unlock_msg, server_holds_lock
  old(unlock_msg(n, l)) &
  (unlock_msg(N, L) <-> old(unlock_msg(N, L)) & !(N = n & L = l)) &
  (server_holds_lock(L) <-> old(server_holds_lock(L)) | L = l)

invariant [mutex] holds_lock(N1, ql) & holds_lock(N2, ql) -> N1 = N2


# Declare a phase automaton structure to prove safety.
automaton {
  safety mutex  # The safety property to prove.

  init phase server  # The initial phase.

  # Adds the given transition to every phase.
  global
    transition send_lock -> self

    transition recv_lock assume l!=ql -> self
    transition recv_grant assume l!=ql -> self
    transition unlock assume l!=ql -> self
    transition recv_unlock assume l!=ql -> self

  # Now come the phases. Each has a name, and then a sequence of declarations,
  # consisting of allowed transitions and (partial) characterizations.

  phase server
    transition recv_lock assume l=ql -> phase grant
    invariant server_holds_lock(ql)

    invariant !grant_msg(X, ql)
    invariant !holds_lock(X, ql)
    invariant !unlock_msg(X, ql)

  phase grant
    transition recv_grant assume l=ql -> phase client
    invariant grant_msg(X, ql) & grant_msg(Y, ql) -> X = Y

    invariant !server_holds_lock(ql)
    invariant !holds_lock(X, ql)
    invariant !unlock_msg(X, ql)

  phase client
    transition unlock assume l=ql -> phase unlock
    invariant holds_lock(X, ql) & holds_lock(Y, ql) -> X = Y

    invariant !server_holds_lock(ql)
    invariant !grant_msg(X, ql)
    invariant !unlock_msg(X, ql)

  phase unlock
    transition recv_unlock assume l=ql -> phase server
    invariant unlock_msg(X, ql) & unlock_msg(Y, ql) -> X = Y

    invariant !server_holds_lock(ql)
    invariant !grant_msg(X, ql)
    invariant !holds_lock(X, ql)
}
