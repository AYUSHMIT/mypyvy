sort key
sort value
sort node

mutable relation table(node, key, value)
mutable relation owner(node, key)
mutable relation transfer_msg(node, key, value)

mutable relation active_node(node)
mutable relation active_key(key)
mutable relation active_value(value)

init active_node(N)
init active_key(K)
init active_value(V)

init !table(N, K, V)
init !transfer_msg(N, K, V)
init owner(N1, K) & owner(N2, K) -> N1 = N2
init forall K. exists N. owner(N, K)

transition reshard(k: key, v: value, n_old: node, n_new: node)
  modifies table, owner, transfer_msg
  old(table(n_old, k, v)) &
  old(active_key(k) & active_value(v) & active_node(n_old) & active_node(n_new)) &
  (table(N, K, V) <-> old(table(N, K, V)) & !(N = n_old & K = k & V = v)) &
  (owner(N, K) <-> old(owner(N, K)) & !(N = n_old & K = k)) &
  (transfer_msg(N, K, V) <-> old(transfer_msg(N, K, V)) | (N = n_new & K = k & V = v))


transition recv_transfer_msg(n: node, k: key, v: value)
  modifies table, owner, transfer_msg
  old(transfer_msg(n, k, v)) &
  old(active_key(k) & active_value(v) & active_node(n)) &
  (transfer_msg(N, K, V) <-> old(transfer_msg(N, K, V)) & !(N = n & K = k & V = v)) &
  (table(N, K, V) <-> old(table(N, K, V)) | (N = n & K = k & V = v)) &
  (owner(N, K) <-> old(owner(N, K)) | (N = n & K = k))


transition put(n: node, k: key, v: value)
  modifies table
  old(owner(n, k)) &
  old(active_key(k) & active_value(v) & active_node(n)) &
  (!(N = n & K = k) -> (table(N, K, V) <-> old(table(N, K, V)))) &
  (table(n, k, V) <-> V = v)


transition decrease_domain()
  modifies active_node, active_key, active_value
  (forall N. active_node(N) -> old(active_node(N))) &
  (forall K. active_key(K) -> old(active_key(K))) &
  (forall V. active_value(V) -> old(active_value(V)))

sat trace {
  decrease_domain
  assert !((exists N,K,V. active_node(N) & active_key(K) & active_value(V) & transfer_msg(N,K,V)) |
           (forall K. active_key(K) -> exists N. active_node(N) & owner(N,K)))
}
