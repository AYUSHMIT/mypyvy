# Model of a leader election in a ring protocol, adapted from:
#
# Oded Padon, Kenneth McMillan, Aurojit Panda, Mooly Sagiv, Sharon
# Shoham. Ivy: Safety Verification by Interactive Generalization. PLDI
# 2016. https://doi.org/10.1145/2908080.2908118
#
# This model uses two sorts, for nodes and IDs, and an injective
# function. The safety property is that there is at most one leader,
# and also a form of deadlock freedom: there must either be a pending
# message, a node that needs to send its original message, or an
# elected leader. The latter property requires a forall-exists
# invariant outside of EPR, and is adapted from:
#
# Yotam M. Y. Feldman, Oded Padon, Neil Immerman, Mooly Sagiv, and
# Sharon Shoham. Bounded Quantifier Instantiation for Checking
# Inductive Invariants. TACAS 2017, LMCS 2019.
# https://doi.org/10.1007/978-3-662-54577-5_5
# https://doi.org/10.23638/LMCS-15(3:18)2019

sort node
sort id

immutable relation le(id, id) @no_minimize
axiom le(X,X)
axiom le(X, Y) & le(Y, Z) -> le(X, Z)
axiom le(X, Y) & le(Y, X) -> X = Y
axiom le(X, Y) | le(Y, X)

immutable relation btw(node, node, node) @no_minimize
axiom btw(W, X, Y) & btw(W, Y, Z) -> btw(W, X, Z)
axiom btw(W, X, Y) -> !btw(W, Y, X)
axiom btw(W, X, Y) | btw(W, Y, X) | W = X | W = Y | X = Y
axiom btw(X, Y, Z) -> btw(Y, Z, X)

immutable function idn(node): id
axiom idn(X) = idn(Y) -> X = Y  # the idn function is injective
axiom exists N. forall M. le(idn(M), idn(N)) # there is a node with maximal id

mutable relation leader(node)
mutable relation pending(id, node)
mutable relation sent(node)

init !leader(N)
init !pending(V, N)
init !sent(N)

transition send(n: node, next: node)
    modifies pending, sent
    & (forall Z. (Z != n & Z != next) -> btw(n, next, Z))
    & (forall V, N. new(pending(V, N)) <-> pending(V, N) | (V = idn(n) & N = next))
    & (forall N. new(sent(N)) <-> (sent(N) | N = n))

transition recv(v: id, n: node, next: node)
    modifies pending, leader
    & (forall Z. (Z != n & Z != next) -> btw(n, next, Z))
    & pending(v, n)
    & if v = idn(n)
      then & (forall N. new(leader(N)) <-> (leader(N) | N = n))
           & (forall V, N. # message may or may not be removed, nothing is sent
                  !(V = v & N = n) -> (new(pending(V, N)) <-> pending(V, N)))
      else & (forall N. new(leader(N)) <-> leader(N))
           & if le(idn(n), v)
             then (forall V, N. # forward v to next, original message may or may not be removed
	             !(V = v & N = n) -> (new(pending(V, N)) <-> (pending(V, N) | (V = v & N = next))))
             else (forall V, N. # message may or may not be removed, nothing is sent
                     !(V = v & N = n) -> (new(pending(V, N)) <-> pending(V, N)))

safety [leader_unique] leader(X) & leader(Y) -> X = Y
safety [not_dead] (exists L. leader(L)) | (exists M,N. pending(M, N)) | (exists N. !sent(N))

invariant [leader_max] leader(L) -> le(idn(N), idn(L))
invariant [seflf_pending_max] pending(idn(L), L) -> le(idn(N), idn(L))
invariant [no_bypass] pending(idn(S), D) & btw(S, N, D) -> le(idn(N), idn(S))

invariant [for_not_dead] exists N. (forall X. le(idn(X), idn(N))) & (!sent(N) | leader(N) | (exists M. pending(idn(N), M)))

sat trace {
    send
    recv
    recv
    recv
    assert exists N. leader(N)
    assert exists N1,N2,N3:node. N1 != N2 & N1 != N3 & N2 != N3
}
