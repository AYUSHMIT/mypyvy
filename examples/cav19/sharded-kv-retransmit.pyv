sort key
sort value
sort node

sort seqnum

mutable relation table(node, key, value)
mutable relation unacked(node, node, key, value, seqnum)
mutable relation owner(node, key)
mutable relation transfer_msg(node, node, key, value, seqnum)
mutable relation ack_msg(node, node, seqnum)
mutable relation seqnum_sent(node, seqnum)
mutable relation seqnum_recvd(node, node, seqnum)

init !table(N, K, V)
init !transfer_msg(SRC, DST, K, V, S)
init owner(N1, K) & owner(N2, K) -> N1 = N2

init !unacked(SRC, DST, K, V, S)
init !ack_msg(SRC, DST, S)
init !seqnum_sent(N, S)
init !seqnum_recvd(N, SENDER, S)

transition reshard(n_old: node, n_new: node, k: key, v: value, s: seqnum)
  modifies table, owner, seqnum_sent, transfer_msg, unacked
  old(table(n_old, k, v)) &
  !old(seqnum_sent(n_old, s)) &
  (seqnum_sent(N, S) <-> old(seqnum_sent(N, S)) | N = n_old & S = s) &
  (table(N, K, V) <-> old(table(N, K, V)) & !(N = n_old & K = k & V = v)) &
  (owner(N, K) <-> old(owner(N, K)) & !(N = n_old & K = k)) &
  (transfer_msg(N1, N2, K, V, S) <-> old(transfer_msg(N1, N2, K, V, S)) | N1 = n_old & N2 = n_new & K = k & V = v & S = s) &
  (unacked(N1, N2, K, V, S) <-> old(unacked(N1, N2, K, V, S)) | N1 = n_old & N2 = n_new & K = k & V = v & S = s)

transition drop_transfer_msg(src: node, dst: node, k: key, v: value, s: seqnum)
  modifies transfer_msg
  old(transfer_msg(src, dst, k, v, s)) &
  (transfer_msg(N1, N2, K, V, S) <-> old(transfer_msg(N1, N2, K, V, S)) & !(N1 = src & N2 = dst & K = k & V = v & S = s))

transition retransmit(src: node, dst: node, k: key, v: value, s: seqnum)
  modifies transfer_msg
  old(unacked(src, dst, k, v, s)) &
  (transfer_msg(N1, N2, K, V, S) <-> old(transfer_msg(N1, N2, K, V, S)) | N1 = src & N2 = dst & K = k & V = v & S = s)

transition recv_transfer_msg(src: node, n: node, k: key, v: value, s: seqnum)
  modifies seqnum_recvd, table, owner
  old(transfer_msg(src, n, k, v, s)) &
  !old(seqnum_recvd(n, src, s)) &
  (seqnum_recvd(N1, N2, S) <-> old(seqnum_recvd(N1, N2, S)) | N1 = n & N2 = src & S = s) &
  (table(N, K, V) <-> old(table(N, K, V)) | (N = n & K = k & V = v)) &
  (owner(N, K) <-> old(owner(N, K)) | N = n & K = k)

transition send_ack(src: node, n: node, k: key, v: value, s: seqnum)
  modifies ack_msg
  old(transfer_msg(src, n, k, v, s)) &
  old(seqnum_recvd(n, src, s)) &
  (ack_msg(N1, N2, S) <-> old(ack_msg(N1, N2, S)) | N1 = src & N2 = n & S = s)

transition drop_ack_msg(src: node, dst:node, s: seqnum)
  modifies ack_msg
  old(ack_msg(src, dst, s)) &
  (ack_msg(N1, N2, S) <-> old(ack_msg(N1, N2, S)) & !(N1 = src & N2 = dst & S = s))

transition recv_ack_msg(src: node, dst: node, s: seqnum)
  modifies unacked
  old(ack_msg(src, dst, s)) &
  (!(N1 = src & N2 = dst & S = s) -> (unacked(N1, N2, K, V, S) <-> old(unacked(N1, N2, K, V, S)))) &
  (!unacked(src, dst, K, V, s))

transition put(n: node, k: key, v: value)
  modifies table
  old(owner(n, k)) &
  (!(N = n & K = k) -> (table(N, K, V) <-> old(table(N, K, V)))) & 
  (table(n, k, V) <-> V = v)

safety [keys_unique] table(N1, K, V1) & table(N2, K, V2) -> N1 = N2 & V1 = V2

invariant owner(N1, K) & owner(N2, K) -> N1 = N2
invariant table(N, K, V) -> owner(N, K)

invariant !(transfer_msg(SRC, DST, K, V, S) & !seqnum_recvd(DST, SRC, S) & owner(N, K))
invariant !(unacked(SRC, DST, K, V, S) & !seqnum_recvd(DST, SRC, S) & owner(N, K))

invariant
  transfer_msg(SRC1, DST1, K, V1, S1) & !seqnum_recvd(DST1, SRC1, S1) &
  transfer_msg(SRC2, DST2, K, V2, S2) & !seqnum_recvd(DST2, SRC2, S2) ->
  SRC1 = SRC2 & DST1 = DST2 & V1 = V2 & S1 = S2

invariant
  unacked(SRC1, DST1, K, V1, S1) & !seqnum_recvd(DST1, SRC1, S1) &
  unacked(SRC2, DST2, K, V2, S2) & !seqnum_recvd(DST2, SRC2, S2) ->
  SRC1 = SRC2 & DST1 = DST2 & V1 = V2 & S1 = S2

invariant
  unacked(SRC1, DST1, K, V1, S1) & !seqnum_recvd(DST1, SRC1, S1) &
  transfer_msg(SRC2, DST2, K, V2, S2) & !seqnum_recvd(DST2, SRC2, S2) ->
  SRC1 = SRC2 & DST1 = DST2 & V1 = V2 & S1 = S2




immutable constant qk: key

automaton {
  init phase owned

  # Adds the given transition to every phase.
  global
    safety table(N1, qk, V1) & table(N2, qk, V2) -> N1 = N2 & V1 = V2
    # transition get -> self
    transition put -> self
    transition recv_transfer_msg -> self assume k!=qk
    transition reshard -> self assume k!=qk
    transition drop_transfer_msg -> self
    transition retransmit -> self
    transition send_ack -> self
    transition drop_ack_msg -> self
    transition recv_ack_msg -> self

  phase owned
    transition reshard -> phase transferring assume k=qk

    transition recv_transfer_msg -> self assume k!=qk
    transition reshard -> self assume k!=qk

    invariant owner(N1, qk) & owner(N2, qk) -> N1 = N2
    invariant !(transfer_msg(SRC, DST, qk, V, S) & !seqnum_recvd(DST, SRC, S))

    invariant table(N, qk, V) -> owner(N, qk)
    invariant table(N1, qk, V1) & table(N2, qk, V2) -> N1 = N2 & V1 = V2
    invariant !(unacked(SRC, DST, qk, V, S) & !seqnum_recvd(DST, SRC, S))


  phase transferring
    transition recv_transfer_msg -> phase owned assume k=qk

    invariant !owner(N, qk)
    invariant transfer_msg(SRC1, DST1, qk, V1, S1) & !seqnum_recvd(DST1, SRC1, S1) & transfer_msg(SRC2, DST2, qk, V2, S2) & !seqnum_recvd(DST2, SRC2, S2) -> SRC1 = SRC2 & DST1 = DST2 & V1 = V2 & S1 = S2

    invariant table(N, qk, V) -> owner(N, qk)
    invariant transfer_msg(SRC1, DST1, qk, V1, S1) & !seqnum_recvd(DST1, SRC1, S1) & unacked(SRC2, DST2, qk, V2, S2) & !seqnum_recvd(DST2, SRC2, S2) -> SRC1 = SRC2 & DST1 = DST2 & V1 = V2 & S1 = S2
    invariant unacked(SRC1, DST1, qk, V1, S1) & !seqnum_recvd(DST1, SRC1, S1) & unacked(SRC2, DST2, qk, V2, S2) & !seqnum_recvd(DST2, SRC2, S2) -> SRC1 = SRC2 & DST1 = DST2 & V1 = V2 & S1 = S2
}
