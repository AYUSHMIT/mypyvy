sort node

immutable relation internal(node)

mutable relation active(node)

mutable relation sent(node, node)
mutable relation allowed_in(node)

mutable relation aborted()
mutable relation witness_notif(node, node)

init active(N)
init !sent(S,D)
init !allowed_in(N)
init !aborted
init !witness_notif(I, E)

transition send_from_internal(src: node, dst: node)
  modifies sent, allowed_in, witness_notif
  & active(src)
  & active(dst)

  & internal(src)
  & !internal(dst)
  & (forall S,D. new(sent(S,D)) <-> sent(S,D) | S = src & D = dst)
  & (forall N. new(allowed_in(N)) <-> allowed_in(N) | N = dst)
  & (forall I,E. new(witness_notif(I,E)) <-> witness_notif(I,E) | I = src & E = dst)

transition send_to_internal(src: node, dst: node)
  modifies sent
  & active(src)
  & active(dst)

  & !internal(src)
  & internal(dst)
  & allowed_in(src)
  & (forall S,D. new(sent(S,D)) <-> sent(S,D) | S = src & D = dst)

transition discover_violation(s: node, d: node)
  modifies aborted
  & active(s)
  & active(d)

  & sent(s, d)
  & internal(d)
  & (forall I. active(I) -> !witness_notif(I, s))
  & new(aborted)

transition decrease_domain()
  modifies active
  new(active(N)) -> active(N)

# safety sent(S,D) & internal(D) -> exists I. internal(I) & sent(I,S)

safety !aborted

sat trace {
  send_from_internal

  send_to_internal
  decrease_domain
  discover_violation

  assert aborted
}

# derived relation R(node):
#   R(N1) <-> (exists N0. (active(N0) &) sent(N0,N1) & witness_notif(N0,N1) & internal(N0))
