sort node

immutable relation internal(node)

mutable relation active(node)

mutable relation sent(node, node)
mutable relation allowed_in(node)

mutable relation aborted()
mutable relation witness_notif(node, node)

init active(N)
init !sent(S,D)
init !allowed_in(N)
init !aborted
init !witness_notif(I, E)

transition send_from_internal(src: node, dst: node)
  modifies sent, allowed_in, witness_notif
  & old(active(src))
  & old(active(dst))

  & old(internal(src))
  & !old(internal(dst))
  & (forall S,D. sent(S,D) <-> old(sent(S,D)) | S = src & D = dst)
  & (forall N. allowed_in(N) <-> old(allowed_in(N)) | N = dst)
  & (forall I,E. witness_notif(I,E) <-> old(witness_notif(I,E)) | I = src & E = dst)

transition send_to_internal(src: node, dst: node)
  modifies sent
  & old(active(src))
  & old(active(dst))

  & !old(internal(src))
  & old(internal(dst))
  & old(allowed_in(src))
  & (forall S,D. sent(S,D) <-> old(sent(S,D)) | S = src & D = dst)

transition discover_violation(s: node, d: node)
  modifies aborted
  & old(active(s))
  & old(active(d))

  & old(sent(s, d))
  & old(internal(d))
  & (forall I. old(active(I)) -> !old(witness_notif(I, s)))
  & aborted

transition decrease_domain()
  modifies active
  active(N) -> old(active(N))

# safety sent(S,D) & internal(D) -> exists I. internal(I) & sent(I,S)

safety !aborted

sat trace {
  send_from_internal

  send_to_internal
  decrease_domain
  discover_violation

  assert aborted
}

# derived relation R(node):
#   R(N1) <-> (exists N0. (active(N0) &) sent(N0,N1) & witness_notif(N0,N1) & internal(N0))
