# module total_order(t: sort, r: relation (t, t)) {
#   axiom r(X,X)                        # Reflexivity
#   axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
#   axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
#   axiom r(X, Y) | r(Y, X)             # Totality
# }
#
# module ring_topology(t: sort) {
#     immutable relation btw(t,t,t)
#
#     axiom btw(W,X,Y) & btw(W,Y,Z) -> btw(W,X,Z)  # transitive
#     axiom btw(W,X,Y) -> !btw(W,Y,X)  # acyclic
#     axiom btw(W,X,Y) | btw(W,Y,X) | W=X | W=Y | X=Y  # total
#     axiom btw(X,Y,Z) -> btw(Y,Z,X)  # cyclic permutations
#
#     definition succ(x: t, y: t)
#         x != y & ((Z != x & Z != y) -> btw(x,y,Z))
# }

sort node

immutable relation le(node, node)

# instantiate total_order(node, le)
axiom le(X,X)
axiom le(X, Y) & le(Y, Z) -> le(X, Z)
axiom le(X, Y) & le(Y, X) -> X = Y
axiom le(X, Y) | le(Y, X)

# instantiate ring_topology(node)
immutable relation btw(node, node, node)

axiom btw(W,X,Y) & btw(W,Y,Z) -> btw(W,X,Z)
axiom btw(W,X,Y) -> !btw(W,Y,X)
axiom btw(W,X,Y) | btw(W,Y,X) | W=X | W=Y | X=Y
axiom btw(X,Y,Z) -> btw(Y,Z,X)

# definition succ(x: node, y: node)
#     x != y & ((Z != x & Z != y) -> btw(x,y,Z))

mutable relation leader(node)
mutable relation pending(node, node)

init !leader(N)
init !pending(N1, N2)

mutable relation wander(node, node)
init wander(N1, N2)

mutable relation trump(node, node)
init !trump(N1, N2)

transition send(n: node, next: node)
  modifies pending
  # succ(n, next) &
  (forall Z. n != next & ((Z != n & Z != next) -> btw(n,next,Z))) &
  (forall N1, N2. new(pending(N1, N2)) <-> pending(N1, N2) | N1 = n & N2 = next)

transition recv(sender: node, n: node, next: node)
  modifies leader, pending, wander, trump
  # succ(n, next) &
  (forall Z. n != next & ((Z != n & Z != next) -> btw(n,next,Z))) &
  pending(sender, n) &
  (sender = n ->
    (forall N. new(leader(N)) <-> leader(N) | N = n) &
    (forall N1, N2.
      !(N1 = sender & N2 = n) ->  # message may or may not be removed
      (new(pending(N1, N2)) <-> pending(N1, N2)))
      & (forall N1,N2. new(wander(N1, N2)) <-> wander(N1, N2))
      & (forall N1,N2. new(trump(N1, N2)) <-> trump(N1, N2))) &
  (sender != n ->
    (forall N. new(leader(N)) <-> leader(N)) &
    (le(n, sender) ->
      (forall N1, N2.
        !(N1 = sender & N2 = n) ->  # message may or may not be removed
        (new(pending(N1, N2)) <-> pending(N1, N2) | N1 = sender & N2 = next)) &
        (new(trump(N1, N2)) <-> (trump(N1, N2) | (N1 = sender & N2 = n))) &
        (new(wander(N1, N2)) <-> (wander(N1, N2) & !(N1 = sender & N2 = n)))) & 
    (!le(n, sender) ->
      (forall N1, N2.
        !(N1 = sender & N2 = n) ->  # message may or may not be removed
        (new(pending(N1, N2)) <-> pending(N1, N2))) &
        (forall N1, N2. new(trump(N1, N2)) <-> trump(N1, N2)) &
        (forall N1, N2. new(wander(N1, N2)) <-> wander(N1, N2))))


safety [leader_max] N1 != N2 -> (leader(N1) -> le(N2, N1))
safety N1 != N2 -> (wander(N1, N2) | trump(N1, N2))

invariant N1 != N2 -> (wander(N1, N2) -> !leader(N1))
invariant N1 != N2 -> (wander(N1, N2) -> (N != N2 & pending(N1, N) -> btw(N1, N, N2)))
invariant N1 != N2 -> (trump(N1, N2) -> !le(N1, N2))