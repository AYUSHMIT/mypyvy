sort node

immutable relation internal(node)

mutable relation active(node)

mutable relation sent(node, node)
mutable relation allowed_in(node)

init active(N)
init !sent(S,D)
init !allowed_in(N)

transition send_from_internal(src: node, dst: node)
  modifies sent, allowed_in
  & active(src)
  & active(dst)

  & internal(src)
  & !internal(dst)
  & (forall S,D. new(sent(S,D)) <-> sent(S,D) | S = src & D = dst)
  & (forall N. new(allowed_in(N)) <-> allowed_in(N) | N = dst)

transition send_to_internal(src: node, dst: node)
  modifies sent
  & active(src)
  & active(dst)

  & !internal(src)
  & internal(dst)
  & allowed_in(src)
  & (forall S,D. new(sent(S,D)) <-> sent(S,D) | S = src & D = dst)

transition decrease_domain()
  modifies active
  new(active(N)) -> active(N)

# safety sent(S,D) & internal(D) -> exists I. internal(I) & sent(I,S)

sat trace {
  send_from_internal
  send_to_internal
  decrease_domain

  assert !(forall S,D. active(S) & active(D) & sent(S,D) & internal(D) ->
                       exists I. active(I) & internal(I) & sent(I,S))
}
