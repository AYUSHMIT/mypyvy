sort round
sort value
sort quorum
sort node

immutable relation le(round, round)
immutable constant round_zero: round

# instantiate total_order(round, le)
axiom le(X,X)
axiom le(X, Y) & le(Y, Z) -> le(X, Z)
axiom le(X, Y) & le(Y, X) -> X = Y
axiom le(X, Y) | le(Y, X)
axiom le(round_zero, X)

immutable relation member(node, quorum)
axiom forall Q1, Q2. exists N. member(N, Q1) & member(N, Q2)

mutable relation one_a(round)
mutable relation one_b_never_voted(node, round)
mutable relation one_b_with_max_vote(node, round, round, value)  # first round is "now", second round is max round sender voted in
mutable function current_round(node): round
mutable relation proposal(round, value)
mutable relation vote(node, round, value)
mutable relation decision(round, value)

mutable relation node_active(node)
mutable relation value_active(value)
mutable relation quorum_active(quorum)
mutable relation round_active(round)

# WLOG, the active domain includes everything in the inital state
init node_active(N)
init value_active(V)
init quorum_active(Q)
init round_active(R)

init !one_a(R)
init !one_b_never_voted(N, R)
init !one_b_with_max_vote(N, R1, R2, V)
init current_round(N) = round_zero
init !proposal(R, V)
init !vote(N, R, V)
init !decision(R, V)

transition send_1a(r: round)
  modifies one_a
  round_active(r) & 
  (forall R. new(one_a(R)) <-> one_a(R) | R = r)

transition join_round_never_voted(n: node, r: round)
  modifies one_b_never_voted, current_round
  node_active(n) & 
  round_active(r) & 
  one_a(r) &
  !le(r, current_round(n)) &
  (forall R. round_active(R) & value_active(V) & !le(r, R) -> !vote(n, R, V)) &
  (forall N, R. new(one_b_never_voted(N, R)) <-> one_b_never_voted(N,R) | N = n & R = r) &
  (forall N. N != n -> new(current_round(N)) = current_round(N)) &
  new(current_round(n)) = r

transition join_round_with_max_vote(n: node, r: round, maxr: round, v: value)
  modifies one_b_with_max_vote, current_round
  node_active(n) & 
  round_active(r) & 
  round_active(maxr) & 
  value_active(v) & 
  one_a(r) &
  !le(r, current_round(n)) &
  !le(r, maxr) &
  vote(n, maxr, v) &
  (forall R, V. round_active(R) & value_active(V) & !le(r, R) & vote(n, R, V) -> le(R, maxr)) &
  (forall N, R, MAXR, V.
    new(one_b_with_max_vote(N, R, MAXR, V)) <-> one_b_with_max_vote(N,R,MAXR,V) | N = n & R = r & MAXR = maxr & V = v) &
  (forall N. N != n -> new(current_round(N)) = current_round(N)) &
  new(current_round(n)) = r

transition propose_without_votes(r: round, q: quorum, v: value)
  modifies proposal
  round_active(r) &
  quorum_active(q) &
  value_active(v) & 
  (forall V. value_active(V) -> !proposal(r, V)) &
  (forall N. node_active(N) & member(N, q) -> one_b_never_voted(N, r)) &
  (forall R, V. new(proposal(R, V)) <-> proposal(R, V) | (R = r & V = v))

transition propose_with_votes(r: round, q: quorum, maxr: round, v: value)
  modifies proposal
  round_active(r) &
  quorum_active(q) &
  round_active(maxr) &
  value_active(v) & 
  (forall V. value_active(V) -> !proposal(r, V)) &
  (forall N. node_active(N) & member(N, q) -> one_b_never_voted(N, r) | exists R,V. round_active(R) & value_active(V) & one_b_with_max_vote(N, r, R, V)) &
  (exists N. node_active(N) & member(N, q) & one_b_with_max_vote(N, r, maxr, v)) &
  (forall N,MAXR,V. node_active(N) & round_active(MAXR) & value_active(V) & member(N, q) & one_b_with_max_vote(N, r, MAXR, V) -> le(MAXR, maxr)) &
  (forall R, V. new(proposal(R, V)) <-> proposal(R, V) | (R = r & V = v))

transition cast_vote(n: node, v: value, r: round)
  modifies vote
  node_active(n) &
  value_active(v) &
  round_active(r) & 
  le(current_round(n), r) &
  proposal(r, v) &
  (forall N, R, V. new(vote(N, R, V)) <-> vote(N, R, V) | N = n & R = r & V = v)

transition decide(r: round, v: value, q: quorum)
  modifies decision
  round_active(r) & 
  value_active(v) &
  quorum_active(q) &
  (forall N. node_active(N) & member(N, q) -> vote(N, r, v)) &
  (forall R, V. new(decision(R, V)) <-> decision(R, V) | R = r & V = v)

transition decrease_domain()
  modifies node_active, value_active, quorum_active, round_active
  (forall N. new(node_active(N)) -> node_active(N)) &
  (forall V. new(value_active(V)) -> value_active(V)) &
  (forall Q. new(quorum_active(Q)) -> quorum_active(Q)) &
  (forall R. new(round_active(R)) -> round_active(R))
  & (forall Q1, Q2. new(quorum_active(Q1)) & new(quorum_active(Q2)) ->
       exists N. new(node_active(N)) & member(N, Q1) & member(N, Q2))
  & new(round_active(round_zero))
  & (forall N. new(node_active(N)) -> let old_round = current_round(N) in new(round_active(old_round)))

safety [decisions_unique]
  round_active(R1) & round_active(R2) &
  value_active(V1) & value_active(V2) &
  decision(R1, V1) & decision(R2, V2) -> V1 = V2

immutable constant r1: round
immutable constant r2: round
axiom r1 != r2 & le(r1, r2)

sat trace {
  send_1a(r2)
  join_round_never_voted(*, r2) 
  propose_without_votes(r2, *, *)
  cast_vote(*, *, r2)
  decide(r2, *, *)

  decrease_domain

  send_1a(r1)
  join_round_never_voted(*, r1)
  propose_without_votes(r1, *, *)
  cast_vote(*, *, r1)
  decide(r1, *, *)
  assert
    !(forall R1,V1,R2,V2.
        round_active(R1) & round_active(R2) &
        value_active(V1) & value_active(V2) &
        decision(R1, V1) & decision(R2, V2) -> V1 = V2)
}
