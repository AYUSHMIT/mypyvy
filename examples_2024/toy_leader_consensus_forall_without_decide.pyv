# A toy version of leader election protocol, modeled in EPR with a
# universal invariant, ispired by the running example of:
#
# Marcelo Taube, Giuliano Losa, Kenneth L. McMillan, Oded Padon, Mooly
# Sagiv, Sharon Shoham, James R. Wilcox, and Doug Woos. Modularity for
# Decidability of Deductive Verification with Applications to
# Distributed Systems. PLDI 2018.
# https://doi.org/10.1145/3192366.3192414
#
# Compared to toy_leader_consensus_forall.pyv, this file constains
# only the leader election part, without deciding on values.

sort quorum
sort node

immutable relation member(node, quorum)
axiom forall Q1, Q2. exists N. member(N, Q1) & member(N, Q2)

mutable relation vote_request_msg(node, node)
mutable relation voted(node)
mutable relation vote_msg(node, node)
mutable relation votes(node, node)
mutable relation leader(node)
mutable constant voting_quorum: quorum

init !vote_request_msg(N1, N2)
init !voted(N)
init !vote_msg(N1, N2)
init !votes(N1, N2)
init !leader(N1)

transition send_request_vote(src: node, dst: node)
	modifies vote_request_msg
	new(vote_request_msg(N1, N2)) <-> (vote_request_msg(N1, N2) | (N1=src & N2=dst))

transition send_vote(src: node, dst: node)
  modifies vote_msg, voted, vote_request_msg
  (!voted(src) & (vote_request_msg(dst, src))) &
  (new(vote_msg(N1, N2)) <-> vote_msg(N1, N2) | N1 = src & N2 = dst) &
  (new(voted(N)) <-> voted(N) | N=src) &
  ((!(N1=dst & N2=src)) -> (new(vote_request_msg(N1, N2)) <-> vote_request_msg(N1, N2)))


transition recv_vote(n: node, sender: node)
  modifies votes
  vote_msg(sender, n) &
  (new(votes(N1, N2)) <-> votes(N1, N2) | N1 = n & N2 = sender)

transition choose_voting_quorum(q, sn)
  modifies voting_quorum
  (forall N. member(N, q) -> votes(sn, N)) &
  (new(voting_quorum) = q)

transition become_leader(n: node)
  modifies leader
  (member(N, voting_quorum) -> votes(n, N)) &
  (new(leader(N)) <-> leader(N) | N = n)

safety leader(N1) & leader(N2) -> N1 = N2

invariant votes(N, N1) -> vote_msg(N1, N)
invariant vote_msg(N, N1) & vote_msg(N, N2) -> N1 = N2
invariant vote_msg(N, N1) -> voted(N)
invariant leader(N) & member(N1, voting_quorum) -> votes(N, N1)

sat trace {
  any transition
  any transition
  any transition
  any transition
  assert exists N. leader(N)
}
